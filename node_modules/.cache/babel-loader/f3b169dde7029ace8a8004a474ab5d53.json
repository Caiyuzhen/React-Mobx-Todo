{"ast":null,"code":"//todo 的基础数据结构，用 mobx 管理\n//数据驱动视图\nimport { makeAutoObservable } from 'mobx';\n\nclass TaskStore {\n  constructor() {\n    this.list = [{\n      id: 1,\n      name: '学习react',\n      isDone: false\n    }, {\n      id: 2,\n      name: '搞定mobx',\n      isDone: true\n    }, {\n      id: 3,\n      name: '学习 ts',\n      isDone: true\n    }];\n    makeAutoObservable(this);\n  } //🔥🔥🔥定义 checkbox 单选操作的方法，点击后就更改上面的数据\n\n\n  changeCheckbox(clickId, isCheck) {\n    //定义一个对象来匹配 list 中的 id， 查找 id (在数组里边找到一个对象并进行修改就用 find，不会新增数组)\n    const listObj = this.list.find(item => item.id === clickId); //🔥🔥🔥🔥🔥如果这个 id 跟点击 list 的对象的 id 匹配，那么就去修改它的数据！！\n    //讨巧了！！因为原生系统定义的 checked 是未打勾状态，而我们的 isDone:\n\n    listObj.isDone = isCheck;\n  }\n\n}\n\nexport default TaskStore;","map":{"version":3,"sources":["/Users/zen/Desktop/React-Mobx-Todo/src/store/task.Store.js"],"names":["makeAutoObservable","TaskStore","constructor","list","id","name","isDone","changeCheckbox","clickId","isCheck","listObj","find","item"],"mappings":"AACA;AACA;AAEA,SAAUA,kBAAV,QAAoC,MAApC;;AAGA,MAAMC,SAAN,CAAgB;AAoBdC,EAAAA,WAAW,GAAG;AAAA,SAnBdC,IAmBc,GAnBP,CACL;AACEC,MAAAA,EAAE,EAAC,CADL;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,MAAM,EAAE;AAHV,KADK,EAML;AACEF,MAAAA,EAAE,EAAC,CADL;AAEEC,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,MAAM,EAAE;AAHV,KANK,EAWL;AACEF,MAAAA,EAAE,EAAC,CADL;AAEEC,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,MAAM,EAAE;AAHV,KAXK,CAmBO;AACZN,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAtBa,CAyBd;;;AACAO,EAAAA,cAAc,CAAEC,OAAF,EAAUC,OAAV,EAAkB;AAE9B;AACA,UAAMC,OAAO,GAAG,KAAKP,IAAL,CAAUQ,IAAV,CAAgBC,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYI,OAApC,CAAhB,CAH8B,CAG+B;AAG7D;;AACAE,IAAAA,OAAO,CAACJ,MAAR,GAAiBG,OAAjB;AAED;;AAnCa;;AAuChB,eAAeR,SAAf","sourcesContent":["\n//todo 的基础数据结构，用 mobx 管理\n//数据驱动视图\n\nimport {  makeAutoObservable } from 'mobx'\n\n\nclass TaskStore {\n  list = [\n    {\n      id:1,\n      name: '学习react',\n      isDone: false\n    },\n    {\n      id:2,\n      name: '搞定mobx',\n      isDone: true\n    },\n    {\n      id:3,\n      name: '学习 ts',\n      isDone: true\n    }\n  ]\n\n\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  \n  //🔥🔥🔥定义 checkbox 单选操作的方法，点击后就更改上面的数据\n  changeCheckbox (clickId,isCheck){\n\n    //定义一个对象来匹配 list 中的 id， 查找 id (在数组里边找到一个对象并进行修改就用 find，不会新增数组)\n    const listObj = this.list.find( item => item.id === clickId )//🔥🔥🔥🔥🔥如果这个 id 跟点击 list 的对象的 id 匹配，那么就去修改它的数据！！\n      \n\n    //讨巧了！！因为原生系统定义的 checked 是未打勾状态，而我们的 isDone:\n    listObj.isDone = isCheck\n\n  }\n}\n\n\nexport default TaskStore\n"]},"metadata":{},"sourceType":"module"}