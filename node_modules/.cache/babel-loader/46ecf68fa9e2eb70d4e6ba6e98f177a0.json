{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/React-Mobx-Todo/src/Todo/index.js\",\n    _s = $RefreshSig$();\n\nimport './index.css';\nimport { useStore } from '../store/index';\nimport { observer } from 'mobx-react-lite'; // 思路：\n// eslint-disable-next-line no-lone-blocks\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /*  1.从 useStore() 中解构赋值出列表实例\n      2.从解构出来的实例中取数据，来渲染 todo 列表\n         2-1.在 store 内定义判断条件跟计算方法（数据层）\n         2-2.在 html 内定义点击事件跟点击事件的方法然后给 store 去传参（视图层）\n      3.实现选中 checkbox 功能(单选/全选)\n         3-1.在 store 内定义判断条件跟计算方法（数据层）\n         3-2.在 html 内定义点击事件跟点击事件的方法然后给 store 去传参（视图层）\n      4.实现删除功能\n         4-1.在 store 内定义判断条件跟计算方法（数据层）\n         4-2.在 html 内定义点击事件跟点击事件的方法然后给 store 去传参（视图层）\n      5.实现回车新增功能\n      6.统计数量功能\n  */\n}\n\nfunction Task() {\n  _s();\n\n  //🔥🔥从 useStore 跟实例中【解构赋值】取出 taskStore 这个子实例！\n  const {\n    taskStore\n  } = useStore(); //视图层方法\n  //🔥🔥🔥🔥定义checkbox 的方法，注意，不是在这里直接改数据，而是传给 mobx =>  思路：mobx Store 去维护状态，input checkbox 只需要把 e.target.value 赋值给 store 内的方法即可！\n  //🔥🔥注意，因为要传两个参数，传不了所以下面的 input 那里换成 ()=>XX() 箭头函数的写法，先传一个参数，这里再传多一个！！！\n\n  function onChange(id, e) {\n    taskStore.changeCheckbox(id, e.target.checked); //🔥🔥🔥🔥🔥把点击到的 list 的 id 跟 checked 状态都传进去！！\n    //讨巧了！！🔥🔥因为原生系统定义的 checked = true 是未打勾状态🔥🔥，而我们的 isDone:false 是未打勾，所以直接相等就可以了，不用特地取返！！\n\n    console.log(e.target.checked);\n  } //定义全选方法！（视图层）\n\n\n  function allChangeFn(e) {\n    taskStore.allCheck(e.target.checked);\n  } //定义删除方法（视图层）\n  //——————————————————————————————————————————————————\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"todoapp\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"new-todo\",\n        autoFocus: true,\n        autoComplete: \"off\",\n        placeholder: \"What needs to be done?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\",\n        checked: taskStore.isAll,\n        onChange: allChangeFn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: taskStore.list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: item.isDone ? 'todo completed' : 'todo',\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"toggle\",\n              type: \"checkbox\",\n              onChange: e => onChange(item.id, e),\n              checked: item.isDone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\" \", item.name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"destroy\",\n              onclick: delTask,\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n} //🔥🔥很关键，数据变化后要影响视图变化的话，得包裹一下, 才是响应式数据\n\n\n_s(Task, \"VAakz6bZAoER/B6JYSI02T+wYMY=\", false, function () {\n  return [useStore];\n});\n\n_c = Task;\nexport default _c2 = observer(Task);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Task\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/zen/Desktop/React-Mobx-Todo/src/Todo/index.js"],"names":["useStore","observer","Task","taskStore","onChange","id","e","changeCheckbox","target","checked","console","log","allChangeFn","allCheck","isAll","list","map","item","isDone","name","delTask"],"mappings":";;;AAAA,OAAO,aAAP;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CAIA;AACA;;;AACA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAG;;AAIH,SAASC,IAAT,GAAgB;AAAA;;AAEd;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBH,QAAQ,EAA9B,CAHc,CAMd;AACA;AACA;;AACA,WAASI,QAAT,CAAmBC,EAAnB,EAAsBC,CAAtB,EAAyB;AACvBH,IAAAA,SAAS,CAACI,cAAV,CAAyBF,EAAzB,EAA6BC,CAAC,CAACE,MAAF,CAASC,OAAtC,EADuB,CACuB;AAC9C;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACE,MAAF,CAASC,OAArB;AACD,GAba,CAgBd;;;AACE,WAASG,WAAT,CAAsBN,CAAtB,EAAyB;AACvBH,IAAAA,SAAS,CAACU,QAAV,CAAmBP,CAAC,CAACE,MAAF,CAASC,OAA5B;AACD,GAnBW,CAuBd;AAMA;;;AAIA,sBACE;AAAS,IAAA,SAAS,EAAC,SAAnB;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAA4B,QAAA,SAAS,MAArC;AAAsC,QAAA,YAAY,EAAC,KAAnD;AAAyD,QAAA,WAAW,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAS,MAAA,SAAS,EAAC,MAAnB;AAAA,8BAGE;AAAO,QAAA,EAAE,EAAC,YAAV;AAAuB,QAAA,SAAS,EAAC,YAAjC;AAA8C,QAAA,IAAI,EAAC,UAAnD;AAA8D,QAAA,OAAO,EAAEN,SAAS,CAACW,KAAjF;AAAyF,QAAA,QAAQ,EAAEF;AAAnG;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE;AAAO,QAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cALF,eAQE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,kBAEGT,SAAS,CAACY,IAAV,CAAeC,GAAf,CAAmBC,IAAI,iBAClB;AAAI,UAAA,SAAS,EAAEA,IAAI,CAACC,MAAL,GAAc,gBAAd,GAAiC,MAAhD;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCAGE;AAAO,cAAA,SAAS,EAAC,QAAjB;AAA2B,cAAA,IAAI,EAAC,UAAhC;AAA8C,cAAA,QAAQ,EAAGZ,CAAD,IAAKF,QAAQ,CAACa,IAAI,CAACZ,EAAN,EAAUC,CAAV,CAArE;AAAqF,cAAA,OAAO,EAAEW,IAAI,CAACC;AAAnG;AAAA;AAAA;AAAA;AAAA,oBAHF,eAKE;AAAA,8BAAUD,IAAI,CAACE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,eAOE;AAAQ,cAAA,SAAS,EAAC,SAAlB;AAA6B,cAAA,OAAO,EAAEC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,WAA8DH,IAAI,CAACZ,EAAnE;AAAA;AAAA;AAAA;AAAA,gBADL;AAFH;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD,C,CAGD;;;GAjFSH,I;UAGeF,Q;;;KAHfE,I;AAkFT,qBAAeD,QAAQ,CAACC,IAAD,CAAvB","sourcesContent":["import './index.css'\nimport { useStore } from '../store/index'\nimport { observer } from 'mobx-react-lite'\n\n\n\n// 思路：\n// eslint-disable-next-line no-lone-blocks\n{/*  1.从 useStore() 中解构赋值出列表实例\n     2.从解构出来的实例中取数据，来渲染 todo 列表\n        2-1.在 store 内定义判断条件跟计算方法（数据层）\n        2-2.在 html 内定义点击事件跟点击事件的方法然后给 store 去传参（视图层）\n     3.实现选中 checkbox 功能(单选/全选)\n        3-1.在 store 内定义判断条件跟计算方法（数据层）\n        3-2.在 html 内定义点击事件跟点击事件的方法然后给 store 去传参（视图层）\n     4.实现删除功能\n        4-1.在 store 内定义判断条件跟计算方法（数据层）\n        4-2.在 html 内定义点击事件跟点击事件的方法然后给 store 去传参（视图层）\n     5.实现回车新增功能\n     6.统计数量功能\n*/}\n\n\n\nfunction Task() {\n\n  //🔥🔥从 useStore 跟实例中【解构赋值】取出 taskStore 这个子实例！\n  const { taskStore } = useStore()\n  \n\n  //视图层方法\n  //🔥🔥🔥🔥定义checkbox 的方法，注意，不是在这里直接改数据，而是传给 mobx =>  思路：mobx Store 去维护状态，input checkbox 只需要把 e.target.value 赋值给 store 内的方法即可！\n  //🔥🔥注意，因为要传两个参数，传不了所以下面的 input 那里换成 ()=>XX() 箭头函数的写法，先传一个参数，这里再传多一个！！！\n  function onChange (id,e) {\n    taskStore.changeCheckbox(id, e.target.checked)//🔥🔥🔥🔥🔥把点击到的 list 的 id 跟 checked 状态都传进去！！\n    //讨巧了！！🔥🔥因为原生系统定义的 checked = true 是未打勾状态🔥🔥，而我们的 isDone:false 是未打勾，所以直接相等就可以了，不用特地取返！！\n    console.log(e.target.checked)\n  }\n\n\n  //定义全选方法！（视图层）\n    function allChangeFn (e) {\n      taskStore.allCheck(e.target.checked)\n    }\n\n\n\n  //定义删除方法（视图层）\n\n\n\n\n\n  //——————————————————————————————————————————————————\n\n\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>Todos</h1>\n        <input className=\"new-todo\" autoFocus autoComplete=\"off\" placeholder=\"What needs to be done?\"/>\n      </header>\n      <section className=\"main\">\n\n        {/* 🌟全选框 */}\n        <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" checked={taskStore.isAll}  onChange={allChangeFn}/>\n        \n        <label htmlFor=\"toggle-all\"></label>\n\n\n        <ul className=\"todo-list\">\n          {/*  2.从解构出来的实例中取数据，来渲染 todo 列表，completed 为选中态 */}\n          {taskStore.list.map(item=>(\n                <li className={item.isDone ? 'todo completed' : 'todo'}  key={item.id} >\n                    <div className=\"view\">\n\n                      {/* 👇受控表单,在 onChange 事件内把数据的更改交回给 taskStore, 🔥🔥🔥🔥注意，因为只有 e 一个参数不够了，所以👇需要改造成箭头函数！！👇false 没打勾，true 打勾*/}\n                      <input className=\"toggle\"  type=\"checkbox\"    onChange={(e)=>onChange(item.id, e)}   checked={item.isDone}  />\n                      \n                      <label > {item.name} </label>\n\n                      <button className=\"destroy\"  onclick={delTask}> </button>\n                    </div>\n                </li>\n          ))}\n\n\n          {/* 🔥🔥🔥思路：先写出 html 模板解构！  然后放进 map(XXX) 方法内👆，然后再加🔥【 key、id、name 内容、isDone 】🔥等数据！             \n                  <li  className=\"todo completed\"> //👈渲染后换成三元运算符来判断是不是选中态！\n                    <div className=\"view\">\n                      <input className=\"toggle\" type=\"checkbox\" defaultChecked={true}/>\n                      <label >learn react</label>\n                      <button className=\"destroy\"></button>\n                    </div>\n                </li> \n          */}\n        </ul>\n\n      </section>\n    </section>\n  )\n}\n\n\n//🔥🔥很关键，数据变化后要影响视图变化的话，得包裹一下, 才是响应式数据\nexport default observer(Task)"]},"metadata":{},"sourceType":"module"}