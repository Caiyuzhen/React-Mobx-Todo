{"ast":null,"code":"var _jsxFileName = \"/Users/zen/Desktop/React-Mobx-Todo/src/Todo/index.js\",\n    _s = $RefreshSig$();\n\nimport './index.css';\nimport { useStore } from '../store/index'; // 思路：\n// eslint-disable-next-line no-lone-blocks\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /*  1.从 useStore() 中解构赋值出列表实例\n      2.从解构出来的实例中取数据，来渲染 todo 列表\n      3.实现选择功能\n      4.实现删除功能\n      5.实现回车新增功能\n      6.统计数量功能\n  */\n} // eslint-disable-next-line no-lone-blocks\n\n{\n  /* 🔥🔥🔥思路：先写出 html 模板解构！  然后放进 map(XXX) 方法内👆，然后再加🔥【 key、id、name 内容、isDone 】🔥等数据！             \n         <li className=\"todo completed\">\n           <div className=\"view\">\n             <input className=\"toggle\" type=\"checkbox\" defaultChecked={true}/>\n             <label >learn react</label>\n             <button className=\"destroy\"></button>\n           </div>\n       </li> \n  */\n}\n\nfunction Task() {\n  _s();\n\n  //🔥🔥从 useStore 跟实例中【解构赋值】取出 taskStore 这个子实例！\n  const {\n    taskStore\n  } = useStore(); //用于来存储受控表单的数据！\n  //思路：mobx Store 去维护状态，input 只需要把 e.target.value 赋值给 store.inputValue 即可！\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"todoapp\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"new-todo\",\n        autoFocus: true,\n        autoComplete: \"off\",\n        placeholder: \"What needs to be done?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"toggle-all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"todo-list\",\n        children: taskStore.list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: item.isDone ? 'todo completed' : 'todo',\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"toggle\",\n              type: \"checkbox\",\n              defaultChecked: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\" \", item.name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"destroy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Task, \"VAakz6bZAoER/B6JYSI02T+wYMY=\", false, function () {\n  return [useStore];\n});\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/Users/zen/Desktop/React-Mobx-Todo/src/Todo/index.js"],"names":["useStore","Task","taskStore","list","map","item","isDone","name","id"],"mappings":";;;AAAA,OAAO,aAAP;AACA,SAASA,QAAT,QAAyB,gBAAzB,C,CAIA;AACA;;;AACA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AAAG,C,CAGH;;AACA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAG;;AAEH,SAASC,IAAT,GAAgB;AAAA;;AAEd;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBF,QAAQ,EAA9B,CAHc,CAKd;AACA;;AAEA,sBACE;AAAS,IAAA,SAAS,EAAC,SAAnB;AAAA,4BACE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,YAAY,EAAC,KAHf;AAIE,QAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAS,MAAA,SAAS,EAAC,MAAnB;AAAA,8BACE;AACE,QAAA,EAAE,EAAC,YADL;AAEE,QAAA,SAAS,EAAC,YAFZ;AAGE,QAAA,IAAI,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAO,QAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cANF,eAQE;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,kBAGGE,SAAS,CAACC,IAAV,CAAeC,GAAf,CAAmBC,IAAI,iBAClB;AAAI,UAAA,SAAS,EAAEA,IAAI,CAACC,MAAL,GAAc,gBAAd,GAAiC,MAAhD;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCAGE;AAAO,cAAA,SAAS,EAAC,QAAjB;AAA2B,cAAA,IAAI,EAAC,UAAhC;AAA6C,cAAA,cAAc,EAAE;AAA7D;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE;AAAA,8BAAUD,IAAI,CAACE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAKE;AAAQ,cAAA,SAAS,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,oBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,WAA8DF,IAAI,CAACG,EAAnE;AAAA;AAAA;AAAA;AAAA,gBADL;AAHH;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD;;GAxDQP,I;UAGeD,Q;;;KAHfC,I;AA0DT,eAAeA,IAAf","sourcesContent":["import './index.css'\nimport { useStore } from '../store/index'\n\n\n\n// 思路：\n// eslint-disable-next-line no-lone-blocks\n{/*  1.从 useStore() 中解构赋值出列表实例\n     2.从解构出来的实例中取数据，来渲染 todo 列表\n     3.实现选择功能\n     4.实现删除功能\n     5.实现回车新增功能\n     6.统计数量功能\n*/}\n\n\n// eslint-disable-next-line no-lone-blocks\n{/* 🔥🔥🔥思路：先写出 html 模板解构！  然后放进 map(XXX) 方法内👆，然后再加🔥【 key、id、name 内容、isDone 】🔥等数据！             \n        <li className=\"todo completed\">\n          <div className=\"view\">\n            <input className=\"toggle\" type=\"checkbox\" defaultChecked={true}/>\n            <label >learn react</label>\n            <button className=\"destroy\"></button>\n          </div>\n      </li> \n*/}\n\nfunction Task() {\n\n  //🔥🔥从 useStore 跟实例中【解构赋值】取出 taskStore 这个子实例！\n  const { taskStore } = useStore()\n  \n  //用于来存储受控表单的数据！\n  //思路：mobx Store 去维护状态，input 只需要把 e.target.value 赋值给 store.inputValue 即可！\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          className=\"new-todo\"\n          autoFocus\n          autoComplete=\"off\"\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n      <section className=\"main\">\n        <input\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          type=\"checkbox\"\n        />\n        <label htmlFor=\"toggle-all\"></label>\n\n        <ul className=\"todo-list\">\n\n          {/*  2.从解构出来的实例中取数据，来渲染 todo 列表，completed 为选中态 */}\n          {taskStore.list.map(item=>(\n                <li className={item.isDone ? 'todo completed' : 'todo'}  key={item.id} >\n                    <div className=\"view\">\n\n                      {/* 👇受控表单,在 onChange 事件内把数据的更改交回给 state */}\n                      <input className=\"toggle\"  type=\"checkbox\"   defaultChecked={true}/>\n                      <label > {item.name} </label>\n                      <button className=\"destroy\"></button>\n                    </div>\n                </li>\n          ))}\n\n          {/* 🔥🔥🔥思路：先写出 html 模板解构！  然后放进 map(XXX) 方法内👆，然后再加🔥【 key、id、name 内容、isDone 】🔥等数据！             \n                  <li  className=\"todo completed\"> //👈渲染后换成三元运算符来判断是不是选中态！\n                    <div className=\"view\">\n                      <input className=\"toggle\" type=\"checkbox\" defaultChecked={true}/>\n                      <label >learn react</label>\n                      <button className=\"destroy\"></button>\n                    </div>\n                </li> \n          */}\n        </ul>\n\n      </section>\n    </section>\n  )\n}\n\nexport default Task"]},"metadata":{},"sourceType":"module"}